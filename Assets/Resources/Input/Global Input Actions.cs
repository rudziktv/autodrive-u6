//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Resources/Input/Global Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GlobalInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GlobalInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Global Input Actions"",
    ""maps"": [
        {
            ""name"": ""Person"",
            ""id"": ""aaa856d1-4fed-44d5-b8e1-c9c7d25c7ec1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ff247272-27de-413f-b09a-46256e3aa8e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""4ee42aff-bd80-4400-89fa-9d5e7970ed61"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d6d9f4a7-5380-4988-b9a3-b286d8f69f4f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3345023-f8ec-4566-8ec6-583ddeda0caf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""810ea41d-3be2-41d6-90f3-d4cd4494b186"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4a0e749-375e-4ef0-ba43-91ece9e84ac0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""29222835-6b8f-4cd9-8f71-9bf6798b8c8d"",
            ""actions"": [
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""c85a56c3-66da-4538-9320-5d880abe38e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle Cursor"",
                    ""type"": ""Button"",
                    ""id"": ""06f04ec6-51c5-4397-b94b-9e72952e780d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom In"",
                    ""type"": ""Button"",
                    ""id"": ""d19576c7-95bc-4aef-97d6-4b878dd714c8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom Out"",
                    ""type"": ""Button"",
                    ""id"": ""d20fbdc8-af34-4279-9287-4fb5d7b1bf24"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""d3adcd51-607d-4582-bfa0-85ee3864232f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""ea1752d2-cd8b-49e8-a706-0b3f6d476655"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43496d00-4606-4edb-aa2e-11881fc7c87a"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Toggle Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81e12a15-581e-4a78-b991-3c43c4d409c5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2093a776-6f28-4a8e-8cc2-9767f24c540b"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Zoom In"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0456a252-6f21-400a-948f-34cc35f72dc6"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Zoom Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dd4548c-8d44-4f63-b8a2-f9f652389a36"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Toggle Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d547a98e-4969-4fd7-adde-b036429d28ff"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Reset Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Functions"",
            ""id"": ""16a225ff-7cc6-4882-96e2-f51846d2fd92"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""646add5d-3164-43d8-899b-b7a19ae8269e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6889a52b-8b1b-4c09-91ce-976ccb9a145d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Radial HUD"",
                    ""type"": ""Button"",
                    ""id"": ""17d35b22-a59a-4a8b-bb49-9792af1c74aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7947110b-5916-4efc-91df-775aa59b7b43"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91f29e93-e104-4625-a08c-f7daa63dd0fd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c83454-42fc-4e07-a378-59fb450f89b3"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Radial HUD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Person
        m_Person = asset.FindActionMap("Person", throwIfNotFound: true);
        m_Person_Movement = m_Person.FindAction("Movement", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Camera = m_Camera.FindAction("Camera", throwIfNotFound: true);
        m_Camera_ToggleCursor = m_Camera.FindAction("Toggle Cursor", throwIfNotFound: true);
        m_Camera_ZoomIn = m_Camera.FindAction("Zoom In", throwIfNotFound: true);
        m_Camera_ZoomOut = m_Camera.FindAction("Zoom Out", throwIfNotFound: true);
        m_Camera_ToggleZoom = m_Camera.FindAction("Toggle Zoom", throwIfNotFound: true);
        m_Camera_ResetZoom = m_Camera.FindAction("Reset Zoom", throwIfNotFound: true);
        // Functions
        m_Functions = asset.FindActionMap("Functions", throwIfNotFound: true);
        m_Functions_Interact = m_Functions.FindAction("Interact", throwIfNotFound: true);
        m_Functions_Pause = m_Functions.FindAction("Pause", throwIfNotFound: true);
        m_Functions_RadialHUD = m_Functions.FindAction("Radial HUD", throwIfNotFound: true);
    }

    ~@GlobalInputActions()
    {
        UnityEngine.Debug.Assert(!m_Person.enabled, "This will cause a leak and performance issues, GlobalInputActions.Person.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, GlobalInputActions.Camera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Functions.enabled, "This will cause a leak and performance issues, GlobalInputActions.Functions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Person
    private readonly InputActionMap m_Person;
    private List<IPersonActions> m_PersonActionsCallbackInterfaces = new List<IPersonActions>();
    private readonly InputAction m_Person_Movement;
    public struct PersonActions
    {
        private @GlobalInputActions m_Wrapper;
        public PersonActions(@GlobalInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Person_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Person; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersonActions set) { return set.Get(); }
        public void AddCallbacks(IPersonActions instance)
        {
            if (instance == null || m_Wrapper.m_PersonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PersonActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPersonActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPersonActions instance)
        {
            if (m_Wrapper.m_PersonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPersonActions instance)
        {
            foreach (var item in m_Wrapper.m_PersonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PersonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PersonActions @Person => new PersonActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Camera;
    private readonly InputAction m_Camera_ToggleCursor;
    private readonly InputAction m_Camera_ZoomIn;
    private readonly InputAction m_Camera_ZoomOut;
    private readonly InputAction m_Camera_ToggleZoom;
    private readonly InputAction m_Camera_ResetZoom;
    public struct CameraActions
    {
        private @GlobalInputActions m_Wrapper;
        public CameraActions(@GlobalInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera => m_Wrapper.m_Camera_Camera;
        public InputAction @ToggleCursor => m_Wrapper.m_Camera_ToggleCursor;
        public InputAction @ZoomIn => m_Wrapper.m_Camera_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_Camera_ZoomOut;
        public InputAction @ToggleZoom => m_Wrapper.m_Camera_ToggleZoom;
        public InputAction @ResetZoom => m_Wrapper.m_Camera_ResetZoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @ToggleCursor.started += instance.OnToggleCursor;
            @ToggleCursor.performed += instance.OnToggleCursor;
            @ToggleCursor.canceled += instance.OnToggleCursor;
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
            @ZoomOut.started += instance.OnZoomOut;
            @ZoomOut.performed += instance.OnZoomOut;
            @ZoomOut.canceled += instance.OnZoomOut;
            @ToggleZoom.started += instance.OnToggleZoom;
            @ToggleZoom.performed += instance.OnToggleZoom;
            @ToggleZoom.canceled += instance.OnToggleZoom;
            @ResetZoom.started += instance.OnResetZoom;
            @ResetZoom.performed += instance.OnResetZoom;
            @ResetZoom.canceled += instance.OnResetZoom;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @ToggleCursor.started -= instance.OnToggleCursor;
            @ToggleCursor.performed -= instance.OnToggleCursor;
            @ToggleCursor.canceled -= instance.OnToggleCursor;
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
            @ZoomOut.started -= instance.OnZoomOut;
            @ZoomOut.performed -= instance.OnZoomOut;
            @ZoomOut.canceled -= instance.OnZoomOut;
            @ToggleZoom.started -= instance.OnToggleZoom;
            @ToggleZoom.performed -= instance.OnToggleZoom;
            @ToggleZoom.canceled -= instance.OnToggleZoom;
            @ResetZoom.started -= instance.OnResetZoom;
            @ResetZoom.performed -= instance.OnResetZoom;
            @ResetZoom.canceled -= instance.OnResetZoom;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Functions
    private readonly InputActionMap m_Functions;
    private List<IFunctionsActions> m_FunctionsActionsCallbackInterfaces = new List<IFunctionsActions>();
    private readonly InputAction m_Functions_Interact;
    private readonly InputAction m_Functions_Pause;
    private readonly InputAction m_Functions_RadialHUD;
    public struct FunctionsActions
    {
        private @GlobalInputActions m_Wrapper;
        public FunctionsActions(@GlobalInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Functions_Interact;
        public InputAction @Pause => m_Wrapper.m_Functions_Pause;
        public InputAction @RadialHUD => m_Wrapper.m_Functions_RadialHUD;
        public InputActionMap Get() { return m_Wrapper.m_Functions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FunctionsActions set) { return set.Get(); }
        public void AddCallbacks(IFunctionsActions instance)
        {
            if (instance == null || m_Wrapper.m_FunctionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FunctionsActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @RadialHUD.started += instance.OnRadialHUD;
            @RadialHUD.performed += instance.OnRadialHUD;
            @RadialHUD.canceled += instance.OnRadialHUD;
        }

        private void UnregisterCallbacks(IFunctionsActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @RadialHUD.started -= instance.OnRadialHUD;
            @RadialHUD.performed -= instance.OnRadialHUD;
            @RadialHUD.canceled -= instance.OnRadialHUD;
        }

        public void RemoveCallbacks(IFunctionsActions instance)
        {
            if (m_Wrapper.m_FunctionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFunctionsActions instance)
        {
            foreach (var item in m_Wrapper.m_FunctionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FunctionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FunctionsActions @Functions => new FunctionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPersonActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnCamera(InputAction.CallbackContext context);
        void OnToggleCursor(InputAction.CallbackContext context);
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
        void OnToggleZoom(InputAction.CallbackContext context);
        void OnResetZoom(InputAction.CallbackContext context);
    }
    public interface IFunctionsActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnRadialHUD(InputAction.CallbackContext context);
    }
}
