//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.0
//     from Assets/Resources/Input/Vehicle Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Resources/Input/Vehicle Input Actions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @VehicleInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @VehicleInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Vehicle Input Actions"",
    ""maps"": [
        {
            ""name"": ""Drive"",
            ""id"": ""2b71f418-1e74-43dc-b4f3-d7f713a8b34f"",
            ""actions"": [
                {
                    ""name"": ""Gas Pedal"",
                    ""type"": ""Value"",
                    ""id"": ""ac18c5f0-a031-4f4c-b9d7-946bdc78a9c3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake Pedal"",
                    ""type"": ""Value"",
                    ""id"": ""42338992-d098-4733-8769-fbd7c0d8c19c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Clutch Pedal"",
                    ""type"": ""Value"",
                    ""id"": ""c11df8d3-61f9-4bce-b015-3d00c7e06e44"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering Wheel"",
                    ""type"": ""Value"",
                    ""id"": ""5345d260-5037-4b92-8f09-1bd084ce4255"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17f3c19d-9633-436c-b9ff-8ee95f236b96"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Z"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=1,max=-1,zero=1),AxisDeadzone(min=0.005,max=0.995)"",
                    ""groups"": "";T300RS"",
                    ""action"": ""Gas Pedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48c41137-3c1c-47f6-abc4-a1dcefcf1657"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Gas Pedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f405d88c-2693-4a01-a5e4-0013f12644ec"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/RotateZ"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=1,max=-1,zero=-1),AxisDeadzone(min=0.005,max=0.995)"",
                    ""groups"": "";T300RS"",
                    ""action"": ""Brake Pedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""490ccd23-7d8c-4d67-919d-af2851532fc6"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Stick/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1,zero=-1)"",
                    ""groups"": "";T300RS"",
                    ""action"": ""Clutch Pedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecf89d8e-3ac3-4943-8c5e-796b77b11ccc"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Stick/x"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(max=1)"",
                    ""groups"": "";T300RS"",
                    ""action"": ""Steering Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shifter"",
            ""id"": ""ee1b5437-9055-4ac2-a872-4b6463c8de2b"",
            ""actions"": [
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Button"",
                    ""id"": ""587a2695-b301-4da8-a786-5f7faa227fba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 1"",
                    ""type"": ""Button"",
                    ""id"": ""f51eb585-5c0f-4987-9b35-26de4389c0bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 2"",
                    ""type"": ""Button"",
                    ""id"": ""609a180a-9d48-44d3-af55-961e28248ea1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 3"",
                    ""type"": ""Button"",
                    ""id"": ""77c39b36-bfdc-4534-aef3-5c4fb33f3b79"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 4"",
                    ""type"": ""Button"",
                    ""id"": ""631865cc-1668-4fe5-b6f0-a4dd3eb29b09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 5"",
                    ""type"": ""Button"",
                    ""id"": ""abf1d6e3-a43a-4fa1-ad40-06a4b4d7c1a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 6"",
                    ""type"": ""Button"",
                    ""id"": ""584a0fe9-eae9-4c9b-b9db-27547cbcaba7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Automatic Drive"",
                    ""type"": ""Button"",
                    ""id"": ""6884ce89-785e-42db-98ce-3ed21786b8be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Automatic Parking"",
                    ""type"": ""Button"",
                    ""id"": ""f5e3ecc5-5a39-4e3f-bfad-be19574cb26c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Automatic Reverse"",
                    ""type"": ""Button"",
                    ""id"": ""f911a994-dcbd-4a08-80b1-e0a6cdb04513"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Automatic Sport"",
                    ""type"": ""Button"",
                    ""id"": ""d8b21512-0fbf-4b6a-826f-c05712821e21"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Automatic Manual"",
                    ""type"": ""Button"",
                    ""id"": ""1c64fdf1-1ac0-43b9-9a69-b82c9e014781"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear Up"",
                    ""type"": ""Button"",
                    ""id"": ""8f27072d-e61d-41be-a423-732aa2ad98a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear Down"",
                    ""type"": ""Button"",
                    ""id"": ""279a42e0-5c8a-46ed-ba5d-04ac8c8516b5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d56f99c8-21fc-48b3-a58b-49278d8c9ccf"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Base2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e8d5d9d-a761-437b-a4ea-43f2da32a8b8"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Gear 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f29e2d9e-2ed3-4919-a13b-04fd57426651"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Thumb"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Gear 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92bfa6bf-e39d-4351-9433-833e7756a3c4"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Thumb2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Gear 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5593c489-71df-4a28-a6c7-c9b718c9562d"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Top"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Gear 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a3bfeb5-843a-4b72-b288-a3134952e869"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Top2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Gear 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c104f686-9eb7-4818-b93e-7351fed4254d"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Pinkie"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Gear 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""447965a1-98f3-479d-b56e-ef833d70e976"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Thumb"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Automatic Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35c74075-e7bb-4924-a69e-a4594c045fd2"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Automatic Parking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83b5f3cd-3859-4d0a-bec4-c2ec78e2efaf"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Base2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Automatic Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9b5b440-bd46-4945-8043-dfbb062b2e7b"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Top2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Automatic Sport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71c5fea9-6e89-4805-99b5-ec48a31661e2"",
                    ""path"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>/Pinkie"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";TH8A Shifter"",
                    ""action"": ""Automatic Manual"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5989a34c-d1d0-4c42-8485-7b0431e2fc2d"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Thumb"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";T300RS"",
                    ""action"": ""Gear Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07629d69-f2de-4e88-8ee8-25c161478827"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";T300RS"",
                    ""action"": ""Gear Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Functions"",
            ""id"": ""2ab25228-20e1-425c-89af-bfeae88d4412"",
            ""actions"": [
                {
                    ""name"": ""Ignition"",
                    ""type"": ""Button"",
                    ""id"": ""034b5186-d2d3-4b2a-bc47-3d957e0e68d6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Starter"",
                    ""type"": ""Button"",
                    ""id"": ""5e47c18e-ced8-4a6d-bf90-638ea305d042"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Parking Brake"",
                    ""type"": ""Button"",
                    ""id"": ""113eb861-b523-4e30-b6c1-d8e0f8362437"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Blinker"",
                    ""type"": ""Button"",
                    ""id"": ""350e29a9-35c3-4125-856c-2098d4f8dc09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Blinker"",
                    ""type"": ""Button"",
                    ""id"": ""8f8a955a-4119-4af9-b02b-bb7777dee29a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Comfort Blinker"",
                    ""type"": ""Button"",
                    ""id"": ""9173859a-5d7d-4004-b29c-b7a63aaf6525"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Comfort Blinker"",
                    ""type"": ""Button"",
                    ""id"": ""b57c1a88-2702-481c-b1c4-9f32384c26b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hazards"",
                    ""type"": ""Button"",
                    ""id"": ""ca060e54-a956-4409-92a0-27777afe3637"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ec33688-8c6e-41f6-a18a-2618dabbb589"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Ignition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""904a11a4-2251-4a02-9b70-f912388f67d6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Starter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff686887-add7-4412-a232-af89951b482d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Parking Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e519e9d-6e43-40b8-b0f8-c5c753ac3d09"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": ""Hold(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Left Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""199ca4c2-4e3a-4d38-af1f-220c6aaee501"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Base5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";T300RS"",
                    ""action"": ""Left Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f3498d8-3f9f-44f9-a8b3-cc4a7f4b5cd6"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": ""Hold(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Right Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27dc4873-463d-42bb-9e90-a661fa1f13e5"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Base6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";T300RS"",
                    ""action"": ""Right Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23f2e47d-474d-43f6-868a-0a1d0d89588a"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": ""Tap(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Left Comfort Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed5c1f16-9050-4d0d-b68f-1e924b3224d6"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Base5"",
                    ""interactions"": ""Tap(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": "";T300RS"",
                    ""action"": ""Left Comfort Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0449cc06-6c5d-4878-9cc4-c529144cc98f"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": ""Tap(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Right Comfort Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c0ea74e-37b6-42b8-9116-2baa3b5ee9c5"",
                    ""path"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>/Base6"",
                    ""interactions"": ""Tap(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": "";T300RS"",
                    ""action"": ""Right Comfort Blinker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29a64cfb-aeda-40bc-8702-300d15c18337"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hazards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2144a905-10bf-49df-8f1d-e1513ec5344e"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Hazards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""View"",
            ""id"": ""ca04f903-92ab-48fb-a78c-e08b8df8451e"",
            ""actions"": [
                {
                    ""name"": ""Change Vehicle View"",
                    ""type"": ""Button"",
                    ""id"": ""95c5ba36-0618-47eb-ae0e-bd0827e26ea6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Driver View"",
                    ""type"": ""Button"",
                    ""id"": ""9b9b8cc3-30cd-4950-ba34-e26bba39aca1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View 1"",
                    ""type"": ""Button"",
                    ""id"": ""ecc95be6-dbfe-4bc0-a3e6-841e8bbf765f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dashboard View"",
                    ""type"": ""Button"",
                    ""id"": ""b25c8dc0-92e6-487f-bd7d-ac383bb83884"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Infotainment View"",
                    ""type"": ""Button"",
                    ""id"": ""3f90632b-49fe-4478-9ccd-91bd3c8c81a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exterior Vehicle View"",
                    ""type"": ""Button"",
                    ""id"": ""88c10f2e-84e5-465b-9eeb-91946e49bba0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d3133f9-61a4-49f1-95d7-7403f3a66391"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Change Vehicle View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caaba3a8-675d-43d3-a32e-97cf8fac02cd"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Driver View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f7f3aa5-e498-4d2b-a3b9-2ffdf3a36a1a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1828453-115e-441d-9a2c-ac4e137c200a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dashboard View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""397fdeb1-9fe2-4c29-8ca5-0ebcaa27095c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Infotainment View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63ebe8f1-6e6e-4bd8-8417-37edaa4c3bfa"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exterior Vehicle View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Trip Computer"",
            ""id"": ""421e9f54-820a-4660-be50-91565684e995"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ec422daf-aad0-4685-a007-24932a844f39"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8ad6e3c-7f3d-4de9-9fca-ab059824bbb0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""T300RS"",
            ""bindingGroup"": ""T300RS"",
            ""devices"": [
                {
                    ""devicePath"": ""<Linux::ThrustMasterInc::ThrustmasterThrustmasterT300RSRacingwheel>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TH8A Shifter"",
            ""bindingGroup"": ""TH8A Shifter"",
            ""devices"": [
                {
                    ""devicePath"": ""<Linux::ThrustMasterInc::ThustmasterT500RSGearShift>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Drive
        m_Drive = asset.FindActionMap("Drive", throwIfNotFound: true);
        m_Drive_GasPedal = m_Drive.FindAction("Gas Pedal", throwIfNotFound: true);
        m_Drive_BrakePedal = m_Drive.FindAction("Brake Pedal", throwIfNotFound: true);
        m_Drive_ClutchPedal = m_Drive.FindAction("Clutch Pedal", throwIfNotFound: true);
        m_Drive_SteeringWheel = m_Drive.FindAction("Steering Wheel", throwIfNotFound: true);
        // Shifter
        m_Shifter = asset.FindActionMap("Shifter", throwIfNotFound: true);
        m_Shifter_Reverse = m_Shifter.FindAction("Reverse", throwIfNotFound: true);
        m_Shifter_Gear1 = m_Shifter.FindAction("Gear 1", throwIfNotFound: true);
        m_Shifter_Gear2 = m_Shifter.FindAction("Gear 2", throwIfNotFound: true);
        m_Shifter_Gear3 = m_Shifter.FindAction("Gear 3", throwIfNotFound: true);
        m_Shifter_Gear4 = m_Shifter.FindAction("Gear 4", throwIfNotFound: true);
        m_Shifter_Gear5 = m_Shifter.FindAction("Gear 5", throwIfNotFound: true);
        m_Shifter_Gear6 = m_Shifter.FindAction("Gear 6", throwIfNotFound: true);
        m_Shifter_AutomaticDrive = m_Shifter.FindAction("Automatic Drive", throwIfNotFound: true);
        m_Shifter_AutomaticParking = m_Shifter.FindAction("Automatic Parking", throwIfNotFound: true);
        m_Shifter_AutomaticReverse = m_Shifter.FindAction("Automatic Reverse", throwIfNotFound: true);
        m_Shifter_AutomaticSport = m_Shifter.FindAction("Automatic Sport", throwIfNotFound: true);
        m_Shifter_AutomaticManual = m_Shifter.FindAction("Automatic Manual", throwIfNotFound: true);
        m_Shifter_GearUp = m_Shifter.FindAction("Gear Up", throwIfNotFound: true);
        m_Shifter_GearDown = m_Shifter.FindAction("Gear Down", throwIfNotFound: true);
        // Functions
        m_Functions = asset.FindActionMap("Functions", throwIfNotFound: true);
        m_Functions_Ignition = m_Functions.FindAction("Ignition", throwIfNotFound: true);
        m_Functions_Starter = m_Functions.FindAction("Starter", throwIfNotFound: true);
        m_Functions_ParkingBrake = m_Functions.FindAction("Parking Brake", throwIfNotFound: true);
        m_Functions_LeftBlinker = m_Functions.FindAction("Left Blinker", throwIfNotFound: true);
        m_Functions_RightBlinker = m_Functions.FindAction("Right Blinker", throwIfNotFound: true);
        m_Functions_LeftComfortBlinker = m_Functions.FindAction("Left Comfort Blinker", throwIfNotFound: true);
        m_Functions_RightComfortBlinker = m_Functions.FindAction("Right Comfort Blinker", throwIfNotFound: true);
        m_Functions_Hazards = m_Functions.FindAction("Hazards", throwIfNotFound: true);
        // View
        m_View = asset.FindActionMap("View", throwIfNotFound: true);
        m_View_ChangeVehicleView = m_View.FindAction("Change Vehicle View", throwIfNotFound: true);
        m_View_DriverView = m_View.FindAction("Driver View", throwIfNotFound: true);
        m_View_View1 = m_View.FindAction("View 1", throwIfNotFound: true);
        m_View_DashboardView = m_View.FindAction("Dashboard View", throwIfNotFound: true);
        m_View_InfotainmentView = m_View.FindAction("Infotainment View", throwIfNotFound: true);
        m_View_ExteriorVehicleView = m_View.FindAction("Exterior Vehicle View", throwIfNotFound: true);
        // Trip Computer
        m_TripComputer = asset.FindActionMap("Trip Computer", throwIfNotFound: true);
        m_TripComputer_Newaction = m_TripComputer.FindAction("New action", throwIfNotFound: true);
    }

    ~@VehicleInputActions()
    {
        UnityEngine.Debug.Assert(!m_Drive.enabled, "This will cause a leak and performance issues, VehicleInputActions.Drive.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Shifter.enabled, "This will cause a leak and performance issues, VehicleInputActions.Shifter.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Functions.enabled, "This will cause a leak and performance issues, VehicleInputActions.Functions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_View.enabled, "This will cause a leak and performance issues, VehicleInputActions.View.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TripComputer.enabled, "This will cause a leak and performance issues, VehicleInputActions.TripComputer.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drive
    private readonly InputActionMap m_Drive;
    private List<IDriveActions> m_DriveActionsCallbackInterfaces = new List<IDriveActions>();
    private readonly InputAction m_Drive_GasPedal;
    private readonly InputAction m_Drive_BrakePedal;
    private readonly InputAction m_Drive_ClutchPedal;
    private readonly InputAction m_Drive_SteeringWheel;
    /// <summary>
    /// Provides access to input actions defined in input action map "Drive".
    /// </summary>
    public struct DriveActions
    {
        private @VehicleInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DriveActions(@VehicleInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Drive/GasPedal".
        /// </summary>
        public InputAction @GasPedal => m_Wrapper.m_Drive_GasPedal;
        /// <summary>
        /// Provides access to the underlying input action "Drive/BrakePedal".
        /// </summary>
        public InputAction @BrakePedal => m_Wrapper.m_Drive_BrakePedal;
        /// <summary>
        /// Provides access to the underlying input action "Drive/ClutchPedal".
        /// </summary>
        public InputAction @ClutchPedal => m_Wrapper.m_Drive_ClutchPedal;
        /// <summary>
        /// Provides access to the underlying input action "Drive/SteeringWheel".
        /// </summary>
        public InputAction @SteeringWheel => m_Wrapper.m_Drive_SteeringWheel;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Drive; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DriveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DriveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DriveActions" />
        public void AddCallbacks(IDriveActions instance)
        {
            if (instance == null || m_Wrapper.m_DriveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DriveActionsCallbackInterfaces.Add(instance);
            @GasPedal.started += instance.OnGasPedal;
            @GasPedal.performed += instance.OnGasPedal;
            @GasPedal.canceled += instance.OnGasPedal;
            @BrakePedal.started += instance.OnBrakePedal;
            @BrakePedal.performed += instance.OnBrakePedal;
            @BrakePedal.canceled += instance.OnBrakePedal;
            @ClutchPedal.started += instance.OnClutchPedal;
            @ClutchPedal.performed += instance.OnClutchPedal;
            @ClutchPedal.canceled += instance.OnClutchPedal;
            @SteeringWheel.started += instance.OnSteeringWheel;
            @SteeringWheel.performed += instance.OnSteeringWheel;
            @SteeringWheel.canceled += instance.OnSteeringWheel;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DriveActions" />
        private void UnregisterCallbacks(IDriveActions instance)
        {
            @GasPedal.started -= instance.OnGasPedal;
            @GasPedal.performed -= instance.OnGasPedal;
            @GasPedal.canceled -= instance.OnGasPedal;
            @BrakePedal.started -= instance.OnBrakePedal;
            @BrakePedal.performed -= instance.OnBrakePedal;
            @BrakePedal.canceled -= instance.OnBrakePedal;
            @ClutchPedal.started -= instance.OnClutchPedal;
            @ClutchPedal.performed -= instance.OnClutchPedal;
            @ClutchPedal.canceled -= instance.OnClutchPedal;
            @SteeringWheel.started -= instance.OnSteeringWheel;
            @SteeringWheel.performed -= instance.OnSteeringWheel;
            @SteeringWheel.canceled -= instance.OnSteeringWheel;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DriveActions.UnregisterCallbacks(IDriveActions)" />.
        /// </summary>
        /// <seealso cref="DriveActions.UnregisterCallbacks(IDriveActions)" />
        public void RemoveCallbacks(IDriveActions instance)
        {
            if (m_Wrapper.m_DriveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DriveActions.AddCallbacks(IDriveActions)" />
        /// <seealso cref="DriveActions.RemoveCallbacks(IDriveActions)" />
        /// <seealso cref="DriveActions.UnregisterCallbacks(IDriveActions)" />
        public void SetCallbacks(IDriveActions instance)
        {
            foreach (var item in m_Wrapper.m_DriveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DriveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DriveActions" /> instance referencing this action map.
    /// </summary>
    public DriveActions @Drive => new DriveActions(this);

    // Shifter
    private readonly InputActionMap m_Shifter;
    private List<IShifterActions> m_ShifterActionsCallbackInterfaces = new List<IShifterActions>();
    private readonly InputAction m_Shifter_Reverse;
    private readonly InputAction m_Shifter_Gear1;
    private readonly InputAction m_Shifter_Gear2;
    private readonly InputAction m_Shifter_Gear3;
    private readonly InputAction m_Shifter_Gear4;
    private readonly InputAction m_Shifter_Gear5;
    private readonly InputAction m_Shifter_Gear6;
    private readonly InputAction m_Shifter_AutomaticDrive;
    private readonly InputAction m_Shifter_AutomaticParking;
    private readonly InputAction m_Shifter_AutomaticReverse;
    private readonly InputAction m_Shifter_AutomaticSport;
    private readonly InputAction m_Shifter_AutomaticManual;
    private readonly InputAction m_Shifter_GearUp;
    private readonly InputAction m_Shifter_GearDown;
    /// <summary>
    /// Provides access to input actions defined in input action map "Shifter".
    /// </summary>
    public struct ShifterActions
    {
        private @VehicleInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ShifterActions(@VehicleInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Reverse".
        /// </summary>
        public InputAction @Reverse => m_Wrapper.m_Shifter_Reverse;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Gear1".
        /// </summary>
        public InputAction @Gear1 => m_Wrapper.m_Shifter_Gear1;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Gear2".
        /// </summary>
        public InputAction @Gear2 => m_Wrapper.m_Shifter_Gear2;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Gear3".
        /// </summary>
        public InputAction @Gear3 => m_Wrapper.m_Shifter_Gear3;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Gear4".
        /// </summary>
        public InputAction @Gear4 => m_Wrapper.m_Shifter_Gear4;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Gear5".
        /// </summary>
        public InputAction @Gear5 => m_Wrapper.m_Shifter_Gear5;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/Gear6".
        /// </summary>
        public InputAction @Gear6 => m_Wrapper.m_Shifter_Gear6;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/AutomaticDrive".
        /// </summary>
        public InputAction @AutomaticDrive => m_Wrapper.m_Shifter_AutomaticDrive;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/AutomaticParking".
        /// </summary>
        public InputAction @AutomaticParking => m_Wrapper.m_Shifter_AutomaticParking;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/AutomaticReverse".
        /// </summary>
        public InputAction @AutomaticReverse => m_Wrapper.m_Shifter_AutomaticReverse;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/AutomaticSport".
        /// </summary>
        public InputAction @AutomaticSport => m_Wrapper.m_Shifter_AutomaticSport;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/AutomaticManual".
        /// </summary>
        public InputAction @AutomaticManual => m_Wrapper.m_Shifter_AutomaticManual;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/GearUp".
        /// </summary>
        public InputAction @GearUp => m_Wrapper.m_Shifter_GearUp;
        /// <summary>
        /// Provides access to the underlying input action "Shifter/GearDown".
        /// </summary>
        public InputAction @GearDown => m_Wrapper.m_Shifter_GearDown;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Shifter; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ShifterActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ShifterActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ShifterActions" />
        public void AddCallbacks(IShifterActions instance)
        {
            if (instance == null || m_Wrapper.m_ShifterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShifterActionsCallbackInterfaces.Add(instance);
            @Reverse.started += instance.OnReverse;
            @Reverse.performed += instance.OnReverse;
            @Reverse.canceled += instance.OnReverse;
            @Gear1.started += instance.OnGear1;
            @Gear1.performed += instance.OnGear1;
            @Gear1.canceled += instance.OnGear1;
            @Gear2.started += instance.OnGear2;
            @Gear2.performed += instance.OnGear2;
            @Gear2.canceled += instance.OnGear2;
            @Gear3.started += instance.OnGear3;
            @Gear3.performed += instance.OnGear3;
            @Gear3.canceled += instance.OnGear3;
            @Gear4.started += instance.OnGear4;
            @Gear4.performed += instance.OnGear4;
            @Gear4.canceled += instance.OnGear4;
            @Gear5.started += instance.OnGear5;
            @Gear5.performed += instance.OnGear5;
            @Gear5.canceled += instance.OnGear5;
            @Gear6.started += instance.OnGear6;
            @Gear6.performed += instance.OnGear6;
            @Gear6.canceled += instance.OnGear6;
            @AutomaticDrive.started += instance.OnAutomaticDrive;
            @AutomaticDrive.performed += instance.OnAutomaticDrive;
            @AutomaticDrive.canceled += instance.OnAutomaticDrive;
            @AutomaticParking.started += instance.OnAutomaticParking;
            @AutomaticParking.performed += instance.OnAutomaticParking;
            @AutomaticParking.canceled += instance.OnAutomaticParking;
            @AutomaticReverse.started += instance.OnAutomaticReverse;
            @AutomaticReverse.performed += instance.OnAutomaticReverse;
            @AutomaticReverse.canceled += instance.OnAutomaticReverse;
            @AutomaticSport.started += instance.OnAutomaticSport;
            @AutomaticSport.performed += instance.OnAutomaticSport;
            @AutomaticSport.canceled += instance.OnAutomaticSport;
            @AutomaticManual.started += instance.OnAutomaticManual;
            @AutomaticManual.performed += instance.OnAutomaticManual;
            @AutomaticManual.canceled += instance.OnAutomaticManual;
            @GearUp.started += instance.OnGearUp;
            @GearUp.performed += instance.OnGearUp;
            @GearUp.canceled += instance.OnGearUp;
            @GearDown.started += instance.OnGearDown;
            @GearDown.performed += instance.OnGearDown;
            @GearDown.canceled += instance.OnGearDown;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ShifterActions" />
        private void UnregisterCallbacks(IShifterActions instance)
        {
            @Reverse.started -= instance.OnReverse;
            @Reverse.performed -= instance.OnReverse;
            @Reverse.canceled -= instance.OnReverse;
            @Gear1.started -= instance.OnGear1;
            @Gear1.performed -= instance.OnGear1;
            @Gear1.canceled -= instance.OnGear1;
            @Gear2.started -= instance.OnGear2;
            @Gear2.performed -= instance.OnGear2;
            @Gear2.canceled -= instance.OnGear2;
            @Gear3.started -= instance.OnGear3;
            @Gear3.performed -= instance.OnGear3;
            @Gear3.canceled -= instance.OnGear3;
            @Gear4.started -= instance.OnGear4;
            @Gear4.performed -= instance.OnGear4;
            @Gear4.canceled -= instance.OnGear4;
            @Gear5.started -= instance.OnGear5;
            @Gear5.performed -= instance.OnGear5;
            @Gear5.canceled -= instance.OnGear5;
            @Gear6.started -= instance.OnGear6;
            @Gear6.performed -= instance.OnGear6;
            @Gear6.canceled -= instance.OnGear6;
            @AutomaticDrive.started -= instance.OnAutomaticDrive;
            @AutomaticDrive.performed -= instance.OnAutomaticDrive;
            @AutomaticDrive.canceled -= instance.OnAutomaticDrive;
            @AutomaticParking.started -= instance.OnAutomaticParking;
            @AutomaticParking.performed -= instance.OnAutomaticParking;
            @AutomaticParking.canceled -= instance.OnAutomaticParking;
            @AutomaticReverse.started -= instance.OnAutomaticReverse;
            @AutomaticReverse.performed -= instance.OnAutomaticReverse;
            @AutomaticReverse.canceled -= instance.OnAutomaticReverse;
            @AutomaticSport.started -= instance.OnAutomaticSport;
            @AutomaticSport.performed -= instance.OnAutomaticSport;
            @AutomaticSport.canceled -= instance.OnAutomaticSport;
            @AutomaticManual.started -= instance.OnAutomaticManual;
            @AutomaticManual.performed -= instance.OnAutomaticManual;
            @AutomaticManual.canceled -= instance.OnAutomaticManual;
            @GearUp.started -= instance.OnGearUp;
            @GearUp.performed -= instance.OnGearUp;
            @GearUp.canceled -= instance.OnGearUp;
            @GearDown.started -= instance.OnGearDown;
            @GearDown.performed -= instance.OnGearDown;
            @GearDown.canceled -= instance.OnGearDown;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ShifterActions.UnregisterCallbacks(IShifterActions)" />.
        /// </summary>
        /// <seealso cref="ShifterActions.UnregisterCallbacks(IShifterActions)" />
        public void RemoveCallbacks(IShifterActions instance)
        {
            if (m_Wrapper.m_ShifterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ShifterActions.AddCallbacks(IShifterActions)" />
        /// <seealso cref="ShifterActions.RemoveCallbacks(IShifterActions)" />
        /// <seealso cref="ShifterActions.UnregisterCallbacks(IShifterActions)" />
        public void SetCallbacks(IShifterActions instance)
        {
            foreach (var item in m_Wrapper.m_ShifterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShifterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ShifterActions" /> instance referencing this action map.
    /// </summary>
    public ShifterActions @Shifter => new ShifterActions(this);

    // Functions
    private readonly InputActionMap m_Functions;
    private List<IFunctionsActions> m_FunctionsActionsCallbackInterfaces = new List<IFunctionsActions>();
    private readonly InputAction m_Functions_Ignition;
    private readonly InputAction m_Functions_Starter;
    private readonly InputAction m_Functions_ParkingBrake;
    private readonly InputAction m_Functions_LeftBlinker;
    private readonly InputAction m_Functions_RightBlinker;
    private readonly InputAction m_Functions_LeftComfortBlinker;
    private readonly InputAction m_Functions_RightComfortBlinker;
    private readonly InputAction m_Functions_Hazards;
    /// <summary>
    /// Provides access to input actions defined in input action map "Functions".
    /// </summary>
    public struct FunctionsActions
    {
        private @VehicleInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public FunctionsActions(@VehicleInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Functions/Ignition".
        /// </summary>
        public InputAction @Ignition => m_Wrapper.m_Functions_Ignition;
        /// <summary>
        /// Provides access to the underlying input action "Functions/Starter".
        /// </summary>
        public InputAction @Starter => m_Wrapper.m_Functions_Starter;
        /// <summary>
        /// Provides access to the underlying input action "Functions/ParkingBrake".
        /// </summary>
        public InputAction @ParkingBrake => m_Wrapper.m_Functions_ParkingBrake;
        /// <summary>
        /// Provides access to the underlying input action "Functions/LeftBlinker".
        /// </summary>
        public InputAction @LeftBlinker => m_Wrapper.m_Functions_LeftBlinker;
        /// <summary>
        /// Provides access to the underlying input action "Functions/RightBlinker".
        /// </summary>
        public InputAction @RightBlinker => m_Wrapper.m_Functions_RightBlinker;
        /// <summary>
        /// Provides access to the underlying input action "Functions/LeftComfortBlinker".
        /// </summary>
        public InputAction @LeftComfortBlinker => m_Wrapper.m_Functions_LeftComfortBlinker;
        /// <summary>
        /// Provides access to the underlying input action "Functions/RightComfortBlinker".
        /// </summary>
        public InputAction @RightComfortBlinker => m_Wrapper.m_Functions_RightComfortBlinker;
        /// <summary>
        /// Provides access to the underlying input action "Functions/Hazards".
        /// </summary>
        public InputAction @Hazards => m_Wrapper.m_Functions_Hazards;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Functions; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="FunctionsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(FunctionsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="FunctionsActions" />
        public void AddCallbacks(IFunctionsActions instance)
        {
            if (instance == null || m_Wrapper.m_FunctionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FunctionsActionsCallbackInterfaces.Add(instance);
            @Ignition.started += instance.OnIgnition;
            @Ignition.performed += instance.OnIgnition;
            @Ignition.canceled += instance.OnIgnition;
            @Starter.started += instance.OnStarter;
            @Starter.performed += instance.OnStarter;
            @Starter.canceled += instance.OnStarter;
            @ParkingBrake.started += instance.OnParkingBrake;
            @ParkingBrake.performed += instance.OnParkingBrake;
            @ParkingBrake.canceled += instance.OnParkingBrake;
            @LeftBlinker.started += instance.OnLeftBlinker;
            @LeftBlinker.performed += instance.OnLeftBlinker;
            @LeftBlinker.canceled += instance.OnLeftBlinker;
            @RightBlinker.started += instance.OnRightBlinker;
            @RightBlinker.performed += instance.OnRightBlinker;
            @RightBlinker.canceled += instance.OnRightBlinker;
            @LeftComfortBlinker.started += instance.OnLeftComfortBlinker;
            @LeftComfortBlinker.performed += instance.OnLeftComfortBlinker;
            @LeftComfortBlinker.canceled += instance.OnLeftComfortBlinker;
            @RightComfortBlinker.started += instance.OnRightComfortBlinker;
            @RightComfortBlinker.performed += instance.OnRightComfortBlinker;
            @RightComfortBlinker.canceled += instance.OnRightComfortBlinker;
            @Hazards.started += instance.OnHazards;
            @Hazards.performed += instance.OnHazards;
            @Hazards.canceled += instance.OnHazards;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="FunctionsActions" />
        private void UnregisterCallbacks(IFunctionsActions instance)
        {
            @Ignition.started -= instance.OnIgnition;
            @Ignition.performed -= instance.OnIgnition;
            @Ignition.canceled -= instance.OnIgnition;
            @Starter.started -= instance.OnStarter;
            @Starter.performed -= instance.OnStarter;
            @Starter.canceled -= instance.OnStarter;
            @ParkingBrake.started -= instance.OnParkingBrake;
            @ParkingBrake.performed -= instance.OnParkingBrake;
            @ParkingBrake.canceled -= instance.OnParkingBrake;
            @LeftBlinker.started -= instance.OnLeftBlinker;
            @LeftBlinker.performed -= instance.OnLeftBlinker;
            @LeftBlinker.canceled -= instance.OnLeftBlinker;
            @RightBlinker.started -= instance.OnRightBlinker;
            @RightBlinker.performed -= instance.OnRightBlinker;
            @RightBlinker.canceled -= instance.OnRightBlinker;
            @LeftComfortBlinker.started -= instance.OnLeftComfortBlinker;
            @LeftComfortBlinker.performed -= instance.OnLeftComfortBlinker;
            @LeftComfortBlinker.canceled -= instance.OnLeftComfortBlinker;
            @RightComfortBlinker.started -= instance.OnRightComfortBlinker;
            @RightComfortBlinker.performed -= instance.OnRightComfortBlinker;
            @RightComfortBlinker.canceled -= instance.OnRightComfortBlinker;
            @Hazards.started -= instance.OnHazards;
            @Hazards.performed -= instance.OnHazards;
            @Hazards.canceled -= instance.OnHazards;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="FunctionsActions.UnregisterCallbacks(IFunctionsActions)" />.
        /// </summary>
        /// <seealso cref="FunctionsActions.UnregisterCallbacks(IFunctionsActions)" />
        public void RemoveCallbacks(IFunctionsActions instance)
        {
            if (m_Wrapper.m_FunctionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="FunctionsActions.AddCallbacks(IFunctionsActions)" />
        /// <seealso cref="FunctionsActions.RemoveCallbacks(IFunctionsActions)" />
        /// <seealso cref="FunctionsActions.UnregisterCallbacks(IFunctionsActions)" />
        public void SetCallbacks(IFunctionsActions instance)
        {
            foreach (var item in m_Wrapper.m_FunctionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FunctionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="FunctionsActions" /> instance referencing this action map.
    /// </summary>
    public FunctionsActions @Functions => new FunctionsActions(this);

    // View
    private readonly InputActionMap m_View;
    private List<IViewActions> m_ViewActionsCallbackInterfaces = new List<IViewActions>();
    private readonly InputAction m_View_ChangeVehicleView;
    private readonly InputAction m_View_DriverView;
    private readonly InputAction m_View_View1;
    private readonly InputAction m_View_DashboardView;
    private readonly InputAction m_View_InfotainmentView;
    private readonly InputAction m_View_ExteriorVehicleView;
    /// <summary>
    /// Provides access to input actions defined in input action map "View".
    /// </summary>
    public struct ViewActions
    {
        private @VehicleInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ViewActions(@VehicleInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "View/ChangeVehicleView".
        /// </summary>
        public InputAction @ChangeVehicleView => m_Wrapper.m_View_ChangeVehicleView;
        /// <summary>
        /// Provides access to the underlying input action "View/DriverView".
        /// </summary>
        public InputAction @DriverView => m_Wrapper.m_View_DriverView;
        /// <summary>
        /// Provides access to the underlying input action "View/View1".
        /// </summary>
        public InputAction @View1 => m_Wrapper.m_View_View1;
        /// <summary>
        /// Provides access to the underlying input action "View/DashboardView".
        /// </summary>
        public InputAction @DashboardView => m_Wrapper.m_View_DashboardView;
        /// <summary>
        /// Provides access to the underlying input action "View/InfotainmentView".
        /// </summary>
        public InputAction @InfotainmentView => m_Wrapper.m_View_InfotainmentView;
        /// <summary>
        /// Provides access to the underlying input action "View/ExteriorVehicleView".
        /// </summary>
        public InputAction @ExteriorVehicleView => m_Wrapper.m_View_ExteriorVehicleView;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_View; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ViewActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ViewActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ViewActions" />
        public void AddCallbacks(IViewActions instance)
        {
            if (instance == null || m_Wrapper.m_ViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ViewActionsCallbackInterfaces.Add(instance);
            @ChangeVehicleView.started += instance.OnChangeVehicleView;
            @ChangeVehicleView.performed += instance.OnChangeVehicleView;
            @ChangeVehicleView.canceled += instance.OnChangeVehicleView;
            @DriverView.started += instance.OnDriverView;
            @DriverView.performed += instance.OnDriverView;
            @DriverView.canceled += instance.OnDriverView;
            @View1.started += instance.OnView1;
            @View1.performed += instance.OnView1;
            @View1.canceled += instance.OnView1;
            @DashboardView.started += instance.OnDashboardView;
            @DashboardView.performed += instance.OnDashboardView;
            @DashboardView.canceled += instance.OnDashboardView;
            @InfotainmentView.started += instance.OnInfotainmentView;
            @InfotainmentView.performed += instance.OnInfotainmentView;
            @InfotainmentView.canceled += instance.OnInfotainmentView;
            @ExteriorVehicleView.started += instance.OnExteriorVehicleView;
            @ExteriorVehicleView.performed += instance.OnExteriorVehicleView;
            @ExteriorVehicleView.canceled += instance.OnExteriorVehicleView;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ViewActions" />
        private void UnregisterCallbacks(IViewActions instance)
        {
            @ChangeVehicleView.started -= instance.OnChangeVehicleView;
            @ChangeVehicleView.performed -= instance.OnChangeVehicleView;
            @ChangeVehicleView.canceled -= instance.OnChangeVehicleView;
            @DriverView.started -= instance.OnDriverView;
            @DriverView.performed -= instance.OnDriverView;
            @DriverView.canceled -= instance.OnDriverView;
            @View1.started -= instance.OnView1;
            @View1.performed -= instance.OnView1;
            @View1.canceled -= instance.OnView1;
            @DashboardView.started -= instance.OnDashboardView;
            @DashboardView.performed -= instance.OnDashboardView;
            @DashboardView.canceled -= instance.OnDashboardView;
            @InfotainmentView.started -= instance.OnInfotainmentView;
            @InfotainmentView.performed -= instance.OnInfotainmentView;
            @InfotainmentView.canceled -= instance.OnInfotainmentView;
            @ExteriorVehicleView.started -= instance.OnExteriorVehicleView;
            @ExteriorVehicleView.performed -= instance.OnExteriorVehicleView;
            @ExteriorVehicleView.canceled -= instance.OnExteriorVehicleView;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ViewActions.UnregisterCallbacks(IViewActions)" />.
        /// </summary>
        /// <seealso cref="ViewActions.UnregisterCallbacks(IViewActions)" />
        public void RemoveCallbacks(IViewActions instance)
        {
            if (m_Wrapper.m_ViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ViewActions.AddCallbacks(IViewActions)" />
        /// <seealso cref="ViewActions.RemoveCallbacks(IViewActions)" />
        /// <seealso cref="ViewActions.UnregisterCallbacks(IViewActions)" />
        public void SetCallbacks(IViewActions instance)
        {
            foreach (var item in m_Wrapper.m_ViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ViewActions" /> instance referencing this action map.
    /// </summary>
    public ViewActions @View => new ViewActions(this);

    // Trip Computer
    private readonly InputActionMap m_TripComputer;
    private List<ITripComputerActions> m_TripComputerActionsCallbackInterfaces = new List<ITripComputerActions>();
    private readonly InputAction m_TripComputer_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "Trip Computer".
    /// </summary>
    public struct TripComputerActions
    {
        private @VehicleInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TripComputerActions(@VehicleInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "TripComputer/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m_TripComputer_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_TripComputer; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TripComputerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TripComputerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TripComputerActions" />
        public void AddCallbacks(ITripComputerActions instance)
        {
            if (instance == null || m_Wrapper.m_TripComputerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TripComputerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TripComputerActions" />
        private void UnregisterCallbacks(ITripComputerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TripComputerActions.UnregisterCallbacks(ITripComputerActions)" />.
        /// </summary>
        /// <seealso cref="TripComputerActions.UnregisterCallbacks(ITripComputerActions)" />
        public void RemoveCallbacks(ITripComputerActions instance)
        {
            if (m_Wrapper.m_TripComputerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TripComputerActions.AddCallbacks(ITripComputerActions)" />
        /// <seealso cref="TripComputerActions.RemoveCallbacks(ITripComputerActions)" />
        /// <seealso cref="TripComputerActions.UnregisterCallbacks(ITripComputerActions)" />
        public void SetCallbacks(ITripComputerActions instance)
        {
            foreach (var item in m_Wrapper.m_TripComputerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TripComputerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TripComputerActions" /> instance referencing this action map.
    /// </summary>
    public TripComputerActions @TripComputer => new TripComputerActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_T300RSSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme T300RSScheme
    {
        get
        {
            if (m_T300RSSchemeIndex == -1) m_T300RSSchemeIndex = asset.FindControlSchemeIndex("T300RS");
            return asset.controlSchemes[m_T300RSSchemeIndex];
        }
    }
    private int m_TH8AShifterSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme TH8AShifterScheme
    {
        get
        {
            if (m_TH8AShifterSchemeIndex == -1) m_TH8AShifterSchemeIndex = asset.FindControlSchemeIndex("TH8A Shifter");
            return asset.controlSchemes[m_TH8AShifterSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Drive" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DriveActions.AddCallbacks(IDriveActions)" />
    /// <seealso cref="DriveActions.RemoveCallbacks(IDriveActions)" />
    public interface IDriveActions
    {
        /// <summary>
        /// Method invoked when associated input action "Gas Pedal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGasPedal(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Brake Pedal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBrakePedal(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Clutch Pedal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClutchPedal(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Steering Wheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSteeringWheel(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Shifter" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ShifterActions.AddCallbacks(IShifterActions)" />
    /// <seealso cref="ShifterActions.RemoveCallbacks(IShifterActions)" />
    public interface IShifterActions
    {
        /// <summary>
        /// Method invoked when associated input action "Reverse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReverse(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear5(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 6" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear6(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Automatic Drive" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAutomaticDrive(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Automatic Parking" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAutomaticParking(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Automatic Reverse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAutomaticReverse(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Automatic Sport" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAutomaticSport(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Automatic Manual" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAutomaticManual(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear Up" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearDown(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Functions" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="FunctionsActions.AddCallbacks(IFunctionsActions)" />
    /// <seealso cref="FunctionsActions.RemoveCallbacks(IFunctionsActions)" />
    public interface IFunctionsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Ignition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIgnition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Starter" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStarter(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Parking Brake" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnParkingBrake(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Blinker" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftBlinker(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Blinker" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightBlinker(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Comfort Blinker" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftComfortBlinker(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Comfort Blinker" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightComfortBlinker(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hazards" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHazards(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "View" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ViewActions.AddCallbacks(IViewActions)" />
    /// <seealso cref="ViewActions.RemoveCallbacks(IViewActions)" />
    public interface IViewActions
    {
        /// <summary>
        /// Method invoked when associated input action "Change Vehicle View" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChangeVehicleView(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Driver View" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDriverView(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "View 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnView1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Dashboard View" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDashboardView(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Infotainment View" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInfotainmentView(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Exterior Vehicle View" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnExteriorVehicleView(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Trip Computer" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TripComputerActions.AddCallbacks(ITripComputerActions)" />
    /// <seealso cref="TripComputerActions.RemoveCallbacks(ITripComputerActions)" />
    public interface ITripComputerActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
}
